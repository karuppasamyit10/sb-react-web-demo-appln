{"ast":null,"code":"import { logout, registerCookie } from '../actions/userAction'; // import { myLog } from './Utility';\n\nimport store from 'store';\nimport { networkChanged } from '../actions/networkAction';\nimport stores from '../stores';\nexport let userSessionTimer;\nexport let userTokenRenewalTimer;\nexport const cookiePresent = () => {\n  registerCookie();\n  return true;\n};\nexport const isLoggedIn = () => {\n  if (typeof store.get('userSession') === 'object') {\n    const currentDate = new Date(); // check token expiry time\n\n    if (!store.get('userSession') || store.get('userSession').expiry_time < currentDate.getSeconds()) {\n      return false;\n    } else {\n      // start scheduleTokenRenewal timer if its not started\n      if (!userSessionTimer) {} // scheduleTokenRenewal();\n      // start userTokenRenewalTimer timer if its not started\n\n\n      if (!userTokenRenewalTimer) {\n        tokenRenewalTimeout();\n      }\n    }\n\n    return true;\n  } // if userSession object is not present return false\n\n\n  return false;\n}; // logout user when user is not active for 30 mins\n\nexport const scheduleTokenRenewal = () => {\n  let sessionTime = 0;\n  userSessionTimer = setInterval(() => {\n    // myLog('interviewing the interval');\n    sessionTime++; // logout user when session expires\n\n    if (sessionTime > 120) {\n      logout(() => {\n        alert('Seesion timeout');\n        window.location.href = '/';\n      });\n    }\n  }, 1000);\n}; // timer to check the access token validity and renew token before it expires\n\nexport const tokenRenewalTimeout = () => {\n  userTokenRenewalTimer = setInterval(() => {\n    // myLog('interviewing the userTokenRenewalTimer');\n    let currentDate = new Date();\n\n    if (!store.get('userSession')) {\n      return false;\n    }\n\n    if (store.get('userSession').expiry_time < currentDate.getSeconds() + 12000) {\n      alert('call Refersh token'); // renewToken()\n    }\n  }, 1000);\n};\n\nconst keyDownTextField = e => {// myLog('keyDownTextField');\n  // if(isLoggedIn()) {\n  //   restartInterval();\n  // }\n};\n\nfunction keyDownEvent(e) {// myLog('keyDownEvent');\n  // if(isLoggedIn()) {\n  //   restartInterval();\n  // }\n}\n\nfunction mouseMoveEvent(e) {} // myLog('mouseMoveEvent');\n// if(isLoggedIn()) {\n//   restartInterval();\n// }\n// Listen to user keypress and reset timer\n\n\ndocument.addEventListener('keypress', keyDownTextField, false); // Listen to user keypress and reset timer\n\ndocument.addEventListener('keypress', keyDownEvent, false); // Listen to user keypress and reset timer\n\ndocument.addEventListener('mousemove', mouseMoveEvent, false);\nwindow.addEventListener('offline', e => {\n  stores.dispatch(networkChanged(false));\n});\nwindow.addEventListener('online', e => {\n  stores.dispatch(networkChanged(true));\n});","map":{"version":3,"sources":["E:\\sb-react-web-demo-appln\\react-web\\src\\utils\\AthuService.js"],"names":["logout","registerCookie","store","networkChanged","stores","userSessionTimer","userTokenRenewalTimer","cookiePresent","isLoggedIn","get","currentDate","Date","expiry_time","getSeconds","tokenRenewalTimeout","scheduleTokenRenewal","sessionTime","setInterval","alert","window","location","href","keyDownTextField","e","keyDownEvent","mouseMoveEvent","document","addEventListener","dispatch"],"mappings":"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","sourcesContent":["import { logout , registerCookie } from '../actions/userAction';\r\n// import { myLog } from './Utility';\r\nimport store from 'store';  \r\nimport {networkChanged} from '../actions/networkAction';\r\nimport stores from '../stores';\r\nexport let userSessionTimer;\r\nexport let userTokenRenewalTimer;\r\n\r\nexport const cookiePresent = () =>{\r\n  registerCookie();\r\n  return true;\r\n}\r\n\r\nexport const isLoggedIn = () =>{\r\n  if(typeof store.get('userSession') === 'object') {\r\n    const currentDate = new Date();\r\n    // check token expiry time\r\n    if(!store.get('userSession') || store.get('userSession').expiry_time < currentDate.getSeconds()) {\r\n      return false;\r\n    }\r\n    else {\r\n      // start scheduleTokenRenewal timer if its not started\r\n      if(! userSessionTimer) {\r\n        // scheduleTokenRenewal();\r\n      }\r\n      // start userTokenRenewalTimer timer if its not started\r\n      if(! userTokenRenewalTimer) {\r\n        tokenRenewalTimeout();\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  // if userSession object is not present return false\r\n  return false;\r\n};\r\n\r\n// logout user when user is not active for 30 mins\r\nexport const scheduleTokenRenewal = () => {\r\n  let sessionTime = 0;\r\n  userSessionTimer = setInterval(() => {\r\n    // myLog('interviewing the interval');\r\n    sessionTime++;\r\n    // logout user when session expires\r\n    if(sessionTime > 120) {\r\n      logout(()=> {\r\n        alert('Seesion timeout');\r\n        window.location.href='/';\r\n      } );\r\n    }\r\n  }, 1000);\r\n};\r\n\r\n// timer to check the access token validity and renew token before it expires\r\nexport const tokenRenewalTimeout = () => {\r\n\r\n  userTokenRenewalTimer = setInterval(() => {\r\n    // myLog('interviewing the userTokenRenewalTimer');\r\n    let currentDate = new Date();\r\n    if(!store.get('userSession')) {\r\n      return false\r\n    }\r\n    if(store.get('userSession').expiry_time < (currentDate.getSeconds() + 12000)) {  \r\n      alert('call Refersh token');\r\n      // renewToken()\r\n    }\r\n  }, 1000);\r\n};\r\n\r\nconst keyDownTextField = (e) => {\r\n  // myLog('keyDownTextField');\r\n  // if(isLoggedIn()) {\r\n  //   restartInterval();\r\n  // }\r\n};\r\n\r\nfunction keyDownEvent(e) {\r\n  // myLog('keyDownEvent');\r\n\r\n  // if(isLoggedIn()) {\r\n  //   restartInterval();\r\n  // }\r\n}\r\n\r\nfunction mouseMoveEvent(e) {\r\n  // myLog('mouseMoveEvent');\r\n\r\n  // if(isLoggedIn()) {\r\n  //   restartInterval();\r\n  // }\r\n}\r\n\r\n// Listen to user keypress and reset timer\r\ndocument.addEventListener('keypress', keyDownTextField, false);\r\n\r\n// Listen to user keypress and reset timer\r\ndocument.addEventListener('keypress', keyDownEvent, false);\r\n\r\n// Listen to user keypress and reset timer\r\ndocument.addEventListener('mousemove', mouseMoveEvent, false);\r\n\r\nwindow.addEventListener('offline', (e) =>{\r\n  stores.dispatch(networkChanged(false));\r\n});\r\n\r\nwindow.addEventListener('online', (e)=>{ \r\n  stores.dispatch(networkChanged(true));\r\n});\r\n"]},"metadata":{},"sourceType":"module"}