{"ast":null,"code":"import _defineProperty from \"E:\\\\sb-react-web-demo-appln\\\\react-web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ACTION_TYPES } from '../utils/Constants';\nlet initalState = {\n  isOnline: true,\n  isNetworkProblem: false\n};\n\nconst NetworkInState = (state = initalState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.NETWORK_CHANGE:\n      state = _objectSpread({}, state, {\n        isOnline: action.payload.isOnline,\n        isNetworkProblem: false\n      });\n      break;\n\n    case ACTION_TYPES.NETWORK_PROBLEM:\n      state = _objectSpread({}, state, {\n        isOnline: true,\n        isNetworkProblem: action.payload.isNetworkProblem\n      });\n      break;\n\n    default:\n      break;\n  }\n\n  return state;\n};\n\nexport default NetworkInState;","map":{"version":3,"sources":["E:\\sb-react-web-demo-appln\\react-web\\src\\reducers\\networkReducer.js"],"names":["ACTION_TYPES","initalState","isOnline","isNetworkProblem","NetworkInState","state","action","type","NETWORK_CHANGE","payload","NETWORK_PROBLEM"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,oBAA7B;AAEA,IAAIC,WAAW,GAAE;AACfC,EAAAA,QAAQ,EAAE,IADK;AAEfC,EAAAA,gBAAgB,EAAE;AAFH,CAAjB;;AAKA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGJ,WAAT,EAAsBK,MAAtB,KAAgC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,YAAY,CAACQ,cAAlB;AACEH,MAAAA,KAAK,qBACAA,KADA;AAEHH,QAAAA,QAAQ,EAAEI,MAAM,CAACG,OAAP,CAAeP,QAFtB;AAGHC,QAAAA,gBAAgB,EAAE;AAHf,QAAL;AAKA;;AACF,SAAKH,YAAY,CAACU,eAAlB;AACEL,MAAAA,KAAK,qBACAA,KADA;AAEHH,QAAAA,QAAQ,EAAE,IAFP;AAGHC,QAAAA,gBAAgB,EAAEG,MAAM,CAACG,OAAP,CAAeN;AAH9B,QAAL;AAKA;;AAEF;AACE;AAjBJ;;AAmBA,SAAOE,KAAP;AACD,CArBD;;AAsBA,eAAeD,cAAf","sourcesContent":["import { ACTION_TYPES } from '../utils/Constants';\r\n\r\nlet initalState ={\r\n  isOnline: true, \r\n  isNetworkProblem: false,\r\n};\r\n\r\nconst NetworkInState = (state = initalState, action)=> {    \r\n  switch (action.type) {\r\n    case ACTION_TYPES.NETWORK_CHANGE:\r\n      state = {\r\n        ...state,\r\n        isOnline: action.payload.isOnline,\r\n        isNetworkProblem: false,\r\n      };\r\n      break; \r\n    case ACTION_TYPES.NETWORK_PROBLEM:\r\n      state = {\r\n        ...state,\r\n        isOnline: true,\r\n        isNetworkProblem: action.payload.isNetworkProblem,\r\n      };\r\n      break;\r\n      \r\n    default:\r\n      break;\r\n  }\r\n  return state;\r\n};\r\nexport default NetworkInState;\r\n\r\n"]},"metadata":{},"sourceType":"module"}