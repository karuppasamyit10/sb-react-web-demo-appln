{"ast":null,"code":"import URL from \"./URL\";\nimport axios from \"axios\";\nimport store from \"store\";\nimport Constants from \"./Constants\";\nimport { myLog } from \"./Utility\";\nexport const axiosCommonInstance = axios.create({\n  baseURL: URL.BASE_URL\n});\nexport const axiosCommon = axios.create({\n  baseURL: URL.BASE_URL\n}); // axiosCommonInstance.interceptors.request.use(\n//   function(config) {\n//     let originalRequest = config;\n//     let userSession = store.get(\"userSession\");\n//     if (Client.isTokenExpired()) {\n//       console.log(\"access token expired , refersh token called\");\n//       let data = {\n//         refresh_token: userSession.refresh_token,\n//         grant_type: \"refresh_token\"\n//       };\n//       return Client.refresh_token(URL.OATHU, data)\n//         .then(response => {\n//           store.set(\"userSession\", response);\n//           if (response && response.refresh_token && response.expires_in) {\n//             store.set(\"expiryTime\", Client.tokenExpires(response.expires_in));\n//           }\n//           originalRequest[\"Authorization\"] = \"Bearer \" + response.access_token;\n//           return originalRequest;\n//         })\n//         .catch(err => {\n//           window.location.replace(\"/\");\n//         });\n//     }\n//     return config;\n//   },\n//   function(err) {\n//     return Promise.reject(err);\n//   }\n// );\n// axiosCommonInstance.interceptors.response.use(\n//   response => {\n//     return response;\n//   },\n//   function(error) {\n//     if (error.response.status === 401) {\n//       myLog(\"Access token expired && calling refresh token ...\");\n//       let userSession = store.get(\"userSession\");\n//       let data = {\n//         refresh_token: userSession.refresh_token,\n//         grant_type: \"refresh_token\"\n//       };\n//       return Client.refresh_token(URL.OATHU, data)\n//         .then(token_response => {\n//           store.set(\"userSession\", token_response);\n//           if (\n//             token_response &&\n//             token_response.refresh_token &&\n//             token_response.expires_in\n//           ) {\n//             store.set(\n//               \"expiryTime\",\n//               Client.tokenExpires(token_response.expires_in)\n//             );\n//           }\n//           error.config.headers[\"Authorization\"] =\n//             token_response.token_type + \" \" + token_response.access_token;\n//           return Promise.resolve(axiosCommonInstance(error.config));\n//         })\n//         .catch(err => {\n//           myLog(\"Refresh Token Error\", err);\n//           window.location.replace(\"/\");\n//         });\n//     }\n//     return Promise.reject(error.response);\n//   }\n// );\n\nexport default class Client {\n  static httpHeader(isAccessToken) {\n    let d = new Date();\n    let headers = {};\n    headers = {\n      \"Content-Type\": \"application/json\",\n      offset: d.getTimezoneOffset()\n    };\n\n    if (isAccessToken) {\n      headers = {\n        \"Content-Type\": \"application/json\",\n        offset: d.getTimezoneOffset(),\n        Authorization: typeof store.get(\"userSession\") === \"object\" ? \"\".concat(store.get(\"userSession\").token_type, \" \").concat(store.get(\"userSession\").access_token) : \"\"\n      };\n    }\n\n    return headers;\n  }\n\n  static isRefreshToken() {\n    let refresh_token;\n    let userSession = store.get(\"userSession\");\n\n    if (userSession) {\n      if (userSession.refresh_token) {\n        refresh_token = userSession.refresh_token;\n      }\n    }\n\n    return refresh_token;\n  }\n\n  static isTokenExpired() {\n    let expiryTime = store.get(\"expiryTime\");\n\n    if (Date.now() > expiryTime - 120 * 1000 || Date.now() > expiryTime) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  static tokenExpires(tokenExpires) {\n    let minutes = Date.now() + tokenExpires * 1000;\n    console.log(\"min\", minutes);\n    return minutes;\n  }\n\n  static refresh_token(url, data) {\n    return new Promise(function (success, failed) {\n      const config = {\n        method: \"POST\",\n        headers: {\n          Authorization: \"Basic Y29udHJvbGNlbnRlcjpjb250cm9sY2VudGVy\",\n          \"Content-Type\": \"application/json\"\n        },\n        url: url,\n        data: data\n      };\n      axiosCommon(config).then(response => {\n        try {\n          if (response.status === Constants.HTTP_CODE.AUTHENTICATION_FAILURE || response.status === Constants.HTTP_CODE.REQUIRED_MISSING) {\n            throw Object({\n              name: response.status,\n              message: Constants.VALIDATION_MSG.AUTH_FAILED\n            });\n          }\n\n          if (response.status === Constants.HTTP_CODE.SUCCESS) {\n            try {\n              return response.data;\n            } catch (e) {\n              throw Object({\n                name: response.status,\n                message: Constants.VALIDATION_MSG.REQ_FAILED\n              });\n            }\n          }\n        } catch (e) {\n          throw Object({\n            name: response.status,\n            message: Constants.VALIDATION_MSG.REQ_FAILED\n          });\n        }\n      }).then(response => {\n        myLog(\"POST ::::::: response\", response);\n        success(response);\n      }).catch(err => {\n        myLog(\"POST ::::::: err\", err);\n        failed(err);\n      });\n    });\n  }\n\n  static get(url, params, isAccessToken) {\n    return new Promise(function (success, failed) {\n      const config = {\n        method: \"GET\",\n        url,\n        params,\n        headers: Client.httpHeader(isAccessToken)\n      };\n      myLog(\"GET ::::::: INPUT\", config);\n      axiosCommonInstance(config).then(response => {\n        try {\n          if (response.status === Constants.HTTP_CODE.AUTHENTICATION_FAILURE || response.status === Constants.HTTP_CODE.REQUIRED_MISSING) {\n            throw Object({\n              name: response.status,\n              message: Constants.VALIDATION_MSG.AUTH_FAILED\n            });\n          }\n\n          if (response.status === Constants.HTTP_CODE.SUCCESS) {\n            try {\n              return response.data;\n            } catch (e) {\n              throw Object({\n                name: response.status,\n                message: Constants.VALIDATION_MSG.REQ_FAILED\n              });\n            }\n          }\n        } catch (e) {\n          throw Object({\n            name: response.status,\n            message: Constants.VALIDATION_MSG.REQ_FAILED\n          });\n        }\n      }).then(response => {\n        myLog(\"GET ::::::: response\", response);\n        success(response);\n      }).catch(err => {\n        myLog(\"GET ::::::: err\", err);\n        failed(err);\n      });\n    });\n  }\n\n  static post(url, data, isAccessToken) {\n    return new Promise(function (success, failed) {\n      const config = {\n        method: \"POST\",\n        url,\n        data,\n        headers: Client.httpHeader(isAccessToken)\n      };\n      myLog(\"POST ::::: Input\", config);\n      axiosCommonInstance(config).then(response => {\n        try {\n          if (response.status === Constants.HTTP_CODE.AUTHENTICATION_FAILURE || response.status === Constants.HTTP_CODE.REQUIRED_MISSING) {\n            throw Object({\n              name: response.status,\n              message: Constants.VALIDATION_MSG.AUTH_FAILED\n            });\n          }\n\n          if (response.status === Constants.HTTP_CODE.SUCCESS) {\n            try {\n              return response.data;\n            } catch (e) {\n              throw Object({\n                name: response.status,\n                message: Constants.VALIDATION_MSG.REQ_FAILED\n              });\n            }\n          }\n        } catch (e) {\n          throw Object({\n            name: response.status,\n            message: Constants.VALIDATION_MSG.REQ_FAILED\n          });\n        }\n      }).then(response => {\n        myLog(\"POST ::::::: response\", response);\n        success(response);\n      }).catch(err => {\n        myLog(\"POST ::::::: err\", err);\n        failed(err);\n      });\n    });\n  }\n\n  static put(url, data, isAccessToken) {\n    return new Promise(function (success, failed) {\n      const config = {\n        method: \"PUT\",\n        url,\n        data,\n        headers: Client.httpHeader(isAccessToken)\n      };\n      myLog(\"PUT ::::::: INPUT\", config);\n      axiosCommonInstance(config).then(response => {\n        try {\n          if (response.status === Constants.HTTP_CODE.AUTHENTICATION_FAILURE || response.status === Constants.HTTP_CODE.REQUIRED_MISSING) {\n            throw Object({\n              name: response.status,\n              message: Constants.VALIDATION_MSG.AUTH_FAILED\n            });\n          }\n\n          if (response.status === Constants.HTTP_CODE.SUCCESS) {\n            try {\n              return response.data;\n            } catch (e) {\n              throw Object({\n                name: response.status,\n                message: Constants.VALIDATION_MSG.REQ_FAILED\n              });\n            }\n          }\n        } catch (e) {\n          throw Object({\n            name: response.status,\n            message: Constants.VALIDATION_MSG.REQ_FAILED\n          });\n        }\n      }).then(response => {\n        myLog(\"PUT ::::::: resounse\", response);\n        success(response);\n      }).catch(err => {\n        myLog(\"PUT ::::::: err\", err);\n        failed(err);\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["E:\\sb-react-web-demo-appln\\react-web\\src\\utils\\client.js"],"names":["URL","axios","store","Constants","myLog","axiosCommonInstance","create","baseURL","BASE_URL","axiosCommon","Client","httpHeader","isAccessToken","d","Date","headers","offset","getTimezoneOffset","Authorization","get","token_type","access_token","isRefreshToken","refresh_token","userSession","isTokenExpired","expiryTime","now","tokenExpires","minutes","console","log","url","data","Promise","success","failed","config","method","then","response","status","HTTP_CODE","AUTHENTICATION_FAILURE","REQUIRED_MISSING","Object","name","message","VALIDATION_MSG","AUTH_FAILED","SUCCESS","e","REQ_FAILED","catch","err","params","post","put"],"mappings":"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","sourcesContent":["import URL from \"./URL\";\r\nimport axios from \"axios\";\r\nimport store from \"store\";\r\nimport Constants from \"./Constants\";\r\nimport { myLog } from \"./Utility\";\r\n\r\nexport const axiosCommonInstance = axios.create({\r\n  baseURL: URL.BASE_URL\r\n});\r\nexport const axiosCommon = axios.create({\r\n  baseURL: URL.BASE_URL\r\n});\r\n\r\n// axiosCommonInstance.interceptors.request.use(\r\n//   function(config) {\r\n//     let originalRequest = config;\r\n//     let userSession = store.get(\"userSession\");\r\n//     if (Client.isTokenExpired()) {\r\n//       console.log(\"access token expired , refersh token called\");\r\n//       let data = {\r\n//         refresh_token: userSession.refresh_token,\r\n//         grant_type: \"refresh_token\"\r\n//       };\r\n//       return Client.refresh_token(URL.OATHU, data)\r\n//         .then(response => {\r\n//           store.set(\"userSession\", response);\r\n//           if (response && response.refresh_token && response.expires_in) {\r\n//             store.set(\"expiryTime\", Client.tokenExpires(response.expires_in));\r\n//           }\r\n//           originalRequest[\"Authorization\"] = \"Bearer \" + response.access_token;\r\n//           return originalRequest;\r\n//         })\r\n//         .catch(err => {\r\n//           window.location.replace(\"/\");\r\n//         });\r\n//     }\r\n//     return config;\r\n//   },\r\n//   function(err) {\r\n//     return Promise.reject(err);\r\n//   }\r\n// );\r\n\r\n// axiosCommonInstance.interceptors.response.use(\r\n//   response => {\r\n//     return response;\r\n//   },\r\n//   function(error) {\r\n//     if (error.response.status === 401) {\r\n//       myLog(\"Access token expired && calling refresh token ...\");\r\n//       let userSession = store.get(\"userSession\");\r\n//       let data = {\r\n//         refresh_token: userSession.refresh_token,\r\n//         grant_type: \"refresh_token\"\r\n//       };\r\n//       return Client.refresh_token(URL.OATHU, data)\r\n//         .then(token_response => {\r\n//           store.set(\"userSession\", token_response);\r\n//           if (\r\n//             token_response &&\r\n//             token_response.refresh_token &&\r\n//             token_response.expires_in\r\n//           ) {\r\n//             store.set(\r\n//               \"expiryTime\",\r\n//               Client.tokenExpires(token_response.expires_in)\r\n//             );\r\n//           }\r\n//           error.config.headers[\"Authorization\"] =\r\n//             token_response.token_type + \" \" + token_response.access_token;\r\n//           return Promise.resolve(axiosCommonInstance(error.config));\r\n//         })\r\n//         .catch(err => {\r\n//           myLog(\"Refresh Token Error\", err);\r\n//           window.location.replace(\"/\");\r\n//         });\r\n//     }\r\n//     return Promise.reject(error.response);\r\n//   }\r\n// );\r\n\r\nexport default class Client {\r\n  static httpHeader(isAccessToken) {\r\n    let d = new Date();\r\n    let headers = {};\r\n    headers = {\r\n      \"Content-Type\": \"application/json\",\r\n      offset: d.getTimezoneOffset()\r\n    };\r\n    if (isAccessToken) {\r\n      headers = {\r\n        \"Content-Type\": \"application/json\",\r\n        offset: d.getTimezoneOffset(),\r\n        Authorization:\r\n          typeof store.get(\"userSession\") === \"object\"\r\n            ? `${store.get(\"userSession\").token_type} ${\r\n                store.get(\"userSession\").access_token\r\n              }`\r\n            : \"\"\r\n      };\r\n    }\r\n    return headers;\r\n  }\r\n\r\n  static isRefreshToken() {\r\n    let refresh_token;\r\n    let userSession = store.get(\"userSession\");\r\n    if (userSession) {\r\n      if (userSession.refresh_token) {\r\n        refresh_token = userSession.refresh_token;\r\n      }\r\n    }\r\n    return refresh_token;\r\n  }\r\n\r\n  static isTokenExpired() {\r\n    let expiryTime = store.get(\"expiryTime\");\r\n    if (Date.now() > expiryTime - 120 * 1000 || Date.now() > expiryTime) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static tokenExpires(tokenExpires) {\r\n    let minutes = Date.now() + tokenExpires * 1000;\r\n    console.log(\"min\", minutes);\r\n    return minutes;\r\n  }\r\n\r\n  static refresh_token(url, data) {\r\n    return new Promise(function(success, failed) {\r\n      const config = {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: \"Basic Y29udHJvbGNlbnRlcjpjb250cm9sY2VudGVy\",\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        url: url,\r\n        data: data\r\n      };\r\n      axiosCommon(config)\r\n        .then(response => {\r\n          try {\r\n            if (\r\n              response.status === Constants.HTTP_CODE.AUTHENTICATION_FAILURE ||\r\n              response.status === Constants.HTTP_CODE.REQUIRED_MISSING\r\n            ) {\r\n              throw Object({\r\n                name: response.status,\r\n                message: Constants.VALIDATION_MSG.AUTH_FAILED\r\n              });\r\n            }\r\n            if (response.status === Constants.HTTP_CODE.SUCCESS) {\r\n              try {\r\n                return response.data;\r\n              } catch (e) {\r\n                throw Object({\r\n                  name: response.status,\r\n                  message: Constants.VALIDATION_MSG.REQ_FAILED\r\n                });\r\n              }\r\n            }\r\n          } catch (e) {\r\n            throw Object({\r\n              name: response.status,\r\n              message: Constants.VALIDATION_MSG.REQ_FAILED\r\n            });\r\n          }\r\n        })\r\n        .then(response => {\r\n          myLog(\"POST ::::::: response\", response);\r\n          success(response);\r\n        })\r\n        .catch(err => {\r\n          myLog(\"POST ::::::: err\", err);\r\n          failed(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  static get(url, params, isAccessToken) {\r\n    return new Promise(function(success, failed) {\r\n      const config = {\r\n        method: \"GET\",\r\n        url,\r\n        params,\r\n        headers: Client.httpHeader(isAccessToken)\r\n      };\r\n\r\n      myLog(\"GET ::::::: INPUT\", config);\r\n      axiosCommonInstance(config)\r\n        .then(response => {\r\n          try {\r\n            if (\r\n              response.status === Constants.HTTP_CODE.AUTHENTICATION_FAILURE ||\r\n              response.status === Constants.HTTP_CODE.REQUIRED_MISSING\r\n            ) {\r\n              throw Object({\r\n                name: response.status,\r\n                message: Constants.VALIDATION_MSG.AUTH_FAILED\r\n              });\r\n            }\r\n            if (response.status === Constants.HTTP_CODE.SUCCESS) {\r\n              try {\r\n                return response.data;\r\n              } catch (e) {\r\n                throw Object({\r\n                  name: response.status,\r\n                  message: Constants.VALIDATION_MSG.REQ_FAILED\r\n                });\r\n              }\r\n            }\r\n          } catch (e) {\r\n            throw Object({\r\n              name: response.status,\r\n              message: Constants.VALIDATION_MSG.REQ_FAILED\r\n            });\r\n          }\r\n        })\r\n        .then(response => {\r\n          myLog(\"GET ::::::: response\", response);\r\n          success(response);\r\n        })\r\n        .catch(err => {\r\n          myLog(\"GET ::::::: err\", err);\r\n          failed(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  static post(url, data, isAccessToken) {\r\n    return new Promise(function(success, failed) {\r\n      const config = {\r\n        method: \"POST\",\r\n        url,\r\n        data,\r\n        headers: Client.httpHeader(isAccessToken)\r\n      };\r\n      myLog(\"POST ::::: Input\", config);\r\n      axiosCommonInstance(config)\r\n        .then(response => {\r\n          try {\r\n            if (\r\n              response.status === Constants.HTTP_CODE.AUTHENTICATION_FAILURE ||\r\n              response.status === Constants.HTTP_CODE.REQUIRED_MISSING\r\n            ) {\r\n              throw Object({\r\n                name: response.status,\r\n                message: Constants.VALIDATION_MSG.AUTH_FAILED\r\n              });\r\n            }\r\n            if (response.status === Constants.HTTP_CODE.SUCCESS) {\r\n              try {\r\n                return response.data;\r\n              } catch (e) {\r\n                throw Object({\r\n                  name: response.status,\r\n                  message: Constants.VALIDATION_MSG.REQ_FAILED\r\n                });\r\n              }\r\n            }\r\n          } catch (e) {\r\n            throw Object({\r\n              name: response.status,\r\n              message: Constants.VALIDATION_MSG.REQ_FAILED\r\n            });\r\n          }\r\n        })\r\n        .then(response => {\r\n          myLog(\"POST ::::::: response\", response);\r\n          success(response);\r\n        })\r\n        .catch(err => {\r\n          myLog(\"POST ::::::: err\", err);\r\n          failed(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  static put(url, data, isAccessToken) {\r\n    return new Promise(function(success, failed) {\r\n      const config = {\r\n        method: \"PUT\",\r\n        url,\r\n        data,\r\n        headers: Client.httpHeader(isAccessToken)\r\n      };\r\n      myLog(\"PUT ::::::: INPUT\", config);\r\n      axiosCommonInstance(config)\r\n        .then(response => {\r\n          try {\r\n            if (\r\n              response.status === Constants.HTTP_CODE.AUTHENTICATION_FAILURE ||\r\n              response.status === Constants.HTTP_CODE.REQUIRED_MISSING\r\n            ) {\r\n              throw Object({\r\n                name: response.status,\r\n                message: Constants.VALIDATION_MSG.AUTH_FAILED\r\n              });\r\n            }\r\n            if (response.status === Constants.HTTP_CODE.SUCCESS) {\r\n              try {\r\n                return response.data;\r\n              } catch (e) {\r\n                throw Object({\r\n                  name: response.status,\r\n                  message: Constants.VALIDATION_MSG.REQ_FAILED\r\n                });\r\n              }\r\n            }\r\n          } catch (e) {\r\n            throw Object({\r\n              name: response.status,\r\n              message: Constants.VALIDATION_MSG.REQ_FAILED\r\n            });\r\n          }\r\n        })\r\n        .then(response => {\r\n          myLog(\"PUT ::::::: resounse\", response);\r\n          success(response);\r\n        })\r\n        .catch(err => {\r\n          myLog(\"PUT ::::::: err\", err);\r\n          failed(err);\r\n        });\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}