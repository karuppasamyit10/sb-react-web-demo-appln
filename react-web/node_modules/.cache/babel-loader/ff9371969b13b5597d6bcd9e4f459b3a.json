{"ast":null,"code":"export const formatBytes = (bytes, decimals = 2) => {\n  if (bytes === 0) return \"0 Bytes\";\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n};\nexport const formatDate = date => {\n  if (date instanceof Date) {\n    return date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear();\n  } else {\n    return \"Invalid date\";\n  }\n};","map":{"version":3,"sources":["E:\\sb-react-web-demo-appln\\react-web\\src\\utils\\utils.js"],"names":["formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","formatDate","date","Date","getMonth","getDate","getFullYear"],"mappings":"AACA,OAAO,MAAMA,WAAW,GAAG,CAACC,KAAD,EAAQC,QAAQ,GAAG,CAAnB,KAAyB;AAClD,MAAID,KAAK,KAAK,CAAd,EAAiB,OAAO,SAAP;AAEjB,QAAME,CAAC,GAAG,IAAV;AACA,QAAMC,EAAE,GAAGF,QAAQ,GAAG,CAAX,GAAe,CAAf,GAAmBA,QAA9B;AACA,QAAMG,KAAK,GAAG,CAAC,OAAD,EAAU,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAAd;AAEA,QAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASR,KAAT,IAAkBM,IAAI,CAACE,GAAL,CAASN,CAAT,CAA7B,CAAV;AAEA,SAAOO,UAAU,CAAC,CAACT,KAAK,GAAGM,IAAI,CAACI,GAAL,CAASR,CAAT,EAAYG,CAAZ,CAAT,EAAyBM,OAAzB,CAAiCR,EAAjC,CAAD,CAAV,GAAmD,GAAnD,GAAyDC,KAAK,CAACC,CAAD,CAArE;AACD,CAVM;AAYP,OAAO,MAAMO,UAAU,GAAGC,IAAI,IAAI;AAChC,MAAIA,IAAI,YAAYC,IAApB,EAA0B;AACxB,WACED,IAAI,CAACE,QAAL,KAAkB,CAAlB,GAAsB,GAAtB,GAA4BF,IAAI,CAACG,OAAL,EAA5B,GAA6C,GAA7C,GAAmDH,IAAI,CAACI,WAAL,EADrD;AAGD,GAJD,MAIO;AACL,WAAO,cAAP;AACD;AACF,CARM","sourcesContent":["\r\nexport const formatBytes = (bytes, decimals = 2) => {\r\n  if (bytes === 0) return \"0 Bytes\";\r\n\r\n  const k = 1024;\r\n  const dm = decimals < 0 ? 0 : decimals;\r\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\r\n\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\r\n};\r\n\r\nexport const formatDate = date => {\r\n  if (date instanceof Date) {\r\n    return (\r\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\r\n    );\r\n  } else {\r\n    return \"Invalid date\";\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}